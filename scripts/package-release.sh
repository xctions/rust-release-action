#!/bin/bash

# Package release assets for distribution
# Usage: package-release.sh <binary-name> <version> <platform>

set -euo pipefail

BINARY_NAME="$1"
VERSION="$2"
PLATFORM="$3"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
RELEASE_DIR="$PROJECT_ROOT/release"

# Create release directory if it doesn't exist
mkdir -p "$RELEASE_DIR"

# Determine binary extension
BINARY_EXT=""
if [[ "$PLATFORM" == *"windows"* ]]; then
    BINARY_EXT=".exe"
fi

BINARY_FILE="${BINARY_NAME}-${PLATFORM}${BINARY_EXT}"
BINARY_PATH="$RELEASE_DIR/$BINARY_FILE"

echo "Packaging $BINARY_NAME $VERSION for $PLATFORM"

# Check if binary exists
if [[ ! -f "$BINARY_PATH" ]]; then
    echo "Error: Binary not found: $BINARY_PATH"
    exit 1
fi

# Create package directory
PACKAGE_DIR="$RELEASE_DIR/${BINARY_NAME}-${VERSION}-${PLATFORM}"
mkdir -p "$PACKAGE_DIR"

# Copy binary
cp "$BINARY_PATH" "$PACKAGE_DIR/"

# Create README for the package
cat > "$PACKAGE_DIR/README.md" << EOF
# $BINARY_NAME $VERSION

This package contains the $BINARY_NAME binary for $PLATFORM.

## Installation

### Quick Install (recommended)
Use the installation script:
\`\`\`bash
curl -fsSL https://github.com/\$REPO/releases/download/$VERSION/install-$PLATFORM.sh | bash
\`\`\`

### Manual Install
1. Copy the binary to a directory in your PATH
2. Make it executable (Unix/Linux/macOS only):
   \`\`\`bash
   chmod +x $BINARY_FILE
   \`\`\`

## Usage
Run \`$BINARY_NAME --help\` for usage information.

## Platform Information
- Platform: $PLATFORM
- Version: $VERSION
- Binary: $BINARY_FILE

Generated by rust-release GitHub Action
EOF

# Create LICENSE file if it exists in the project root
if [[ -f "$PROJECT_ROOT/../LICENSE" ]]; then
    cp "$PROJECT_ROOT/../LICENSE" "$PACKAGE_DIR/"
elif [[ -f "$PROJECT_ROOT/../LICENSE.md" ]]; then
    cp "$PROJECT_ROOT/../LICENSE.md" "$PACKAGE_DIR/"
fi

# Create archive based on platform
ARCHIVE_NAME="${BINARY_NAME}-${VERSION}-${PLATFORM}"
if [[ "$PLATFORM" == *"windows"* ]]; then
    # Create ZIP for Windows
    cd "$RELEASE_DIR"
    zip -r "${ARCHIVE_NAME}.zip" "$(basename "$PACKAGE_DIR")"
    echo "Created Windows package: $RELEASE_DIR/${ARCHIVE_NAME}.zip"
else
    # Create tar.gz for Unix-like systems
    cd "$RELEASE_DIR"
    tar -czf "${ARCHIVE_NAME}.tar.gz" "$(basename "$PACKAGE_DIR")"
    echo "Created Unix package: $RELEASE_DIR/${ARCHIVE_NAME}.tar.gz"
fi

# Clean up temporary package directory
rm -rf "$PACKAGE_DIR"

echo "Packaging completed successfully"