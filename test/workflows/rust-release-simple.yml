name: Rust Build & Release (Simple)

on:
  workflow_call:
    inputs:
      binary-name:
        description: 'Binary name (defaults to repository name)'
        required: false
        type: string
        default: ''
      exclude:
        description: 'Comma-separated platforms to exclude'
        required: false
        type: string
        default: ''
      rust-version:
        description: 'Rust version to use'
        required: false
        type: string
        default: 'stable'
      cargo-args:
        description: 'Additional cargo build arguments'
        required: false
        type: string
        default: '--release'
      generate-checksums:
        description: 'Generate SHA256 checksums'
        required: false
        type: boolean
        default: true
      create-archives:
        description: 'Create tar.gz/zip archives'
        required: false
        type: boolean
        default: true
      enable-npm:
        description: 'Enable npm publishing'
        required: false
        type: boolean
        default: false
      npm-package-name:
        description: 'npm package name (required if enable-npm=true)'
        required: false
        type: string
        default: ''
      npm-dist-tag:
        description: 'npm dist-tag (auto-detected from release tag if not specified)'
        required: false
        type: string
        default: ''
      npm-description:
        description: 'Package description'
        required: false
        type: string
        default: ''
    secrets:
      GITHUB_TOKEN:
        required: true
      NPM_TOKEN:
        required: false
  workflow_dispatch:
    inputs:
      binary-name:
        description: 'Binary name (defaults to repository name)'
        required: false
        type: string
        default: ''
      exclude:
        description: 'Comma-separated platforms to exclude'
        required: false
        type: string
        default: ''
      rust-version:
        description: 'Rust version to use'
        required: false
        type: string
        default: 'stable'
      cargo-args:
        description: 'Additional cargo build arguments'
        required: false
        type: string
        default: '--release'
      generate-checksums:
        description: 'Generate SHA256 checksums'
        required: false
        type: boolean
        default: true
      create-archives:
        description: 'Create tar.gz/zip archives'
        required: false
        type: boolean
        default: true
      enable-npm:
        description: 'Enable npm publishing'
        required: false
        type: boolean
        default: false
      npm-package-name:
        description: 'npm package name (required if enable-npm=true)'
        required: false
        type: string
        default: ''
      npm-dist-tag:
        description: 'npm dist-tag (auto-detected from release tag if not specified)'
        required: false
        type: string
        default: ''
      npm-description:
        description: 'Package description'
        required: false
        type: string
        default: ''

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
            platform: "linux-x86_64"
          - target: "aarch64-unknown-linux-gnu"
            os: "ubuntu-latest"
            platform: "linux-arm64"
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
            platform: "linux-x86_64-musl"
          - target: "x86_64-apple-darwin"
            os: "macos-12"
            platform: "mac-x86_64"
          - target: "aarch64-apple-darwin"
            os: "macos-latest"
            platform: "mac-arm64"
          - target: "x86_64-pc-windows-msvc"
            os: "windows-latest"
            platform: "windows-x86_64"
    
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          # Set binary name (auto-detect from repo if not provided)
          BINARY_NAME="${{ inputs.binary-name }}"
          if [[ -z "$BINARY_NAME" ]]; then
            BINARY_NAME="${{ github.event.repository.name }}"
          fi
          
          echo "binary-name=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "Building binary: $BINARY_NAME for ${{ matrix.platform }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-version }}
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation
        if: runner.os == 'Linux'
        shell: bash
        run: |
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
            x86_64-unknown-linux-musl)
              sudo apt-get update && sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-musl)
              sudo apt-get update && sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
          esac

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binary
        shell: bash
        run: |
          BINARY_NAME="${{ steps.setup.outputs.binary-name }}"
          
          # Build binary (let cargo handle validation and errors)
          cargo build --bin "$BINARY_NAME" --target ${{ matrix.target }} ${{ inputs.cargo-args }}
          
          # Determine binary extension
          BINARY_EXT=""
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_EXT=".exe"
          fi
          
          # Copy to release directory
          mkdir -p release
          SOURCE="target/${{ matrix.target }}/release/${BINARY_NAME}${BINARY_EXT}"
          TARGET="release/${BINARY_NAME}-${{ matrix.platform }}${BINARY_EXT}"
          
          cp "$SOURCE" "$TARGET"
          
          # Set executable permissions (Unix)
          if [[ "${{ matrix.target }}" != *"windows"* ]]; then
            chmod +x "$TARGET"
          fi
          
          echo "Built: $TARGET"

      - name: Create archive
        if: inputs.create-archives
        shell: bash
        run: |
          BINARY_NAME="${{ steps.setup.outputs.binary-name }}"
          PLATFORM="${{ matrix.platform }}"
          TAG="${{ github.ref_name }}"
          
          # Determine file extensions
          BINARY_EXT=""
          ARCHIVE_EXT="tar.gz"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_EXT=".exe"
            ARCHIVE_EXT="zip"
          fi
          
          BINARY_FILE="${BINARY_NAME}-${PLATFORM}${BINARY_EXT}"
          ARCHIVE_NAME="${BINARY_NAME}-${TAG}-${PLATFORM}"
          
          # Create archive with binary
          mkdir -p "temp/$ARCHIVE_NAME"
          cp "release/$BINARY_FILE" "temp/$ARCHIVE_NAME/"
          
          cd temp
          if [[ "$ARCHIVE_EXT" == "zip" ]]; then
            zip -r "../release/${ARCHIVE_NAME}.zip" "$ARCHIVE_NAME"
          else
            tar -czf "../release/${ARCHIVE_NAME}.tar.gz" "$ARCHIVE_NAME"
          fi
          cd ..
          rm -rf temp
          
          echo "Created: ${ARCHIVE_NAME}.${ARCHIVE_EXT}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: release/
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          
          echo "Release assets:"
          ls -la release-assets/

      - name: Generate checksums
        if: inputs.generate-checksums
        shell: bash
        run: |
          cd release-assets
          
          if command -v sha256sum >/dev/null; then
            sha256sum * > checksums.txt
          else
            shasum -a 256 * > checksums.txt
          fi
          
          echo "Generated checksums:"
          cat checksums.txt

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}