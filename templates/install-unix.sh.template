#!/bin/bash

# Installation script for {{BINARY_NAME}} ({{PLATFORM}})
# Version: {{VERSION}}

set -euo pipefail

BINARY_NAME="{{BINARY_NAME}}"
PLATFORM="{{PLATFORM}}"
VERSION="{{VERSION}}"
REPO="{{REPO}}"
BINARY_EXT="{{BINARY_EXT}}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Detect architecture and OS
detect_platform() {
    local os arch
    
    case "$(uname -s)" in
        Linux*)  os="linux" ;;
        Darwin*) os="mac" ;;
        *)       error "Unsupported operating system: $(uname -s)" ;;
    esac
    
    case "$(uname -m)" in
        x86_64|amd64) arch="x86_64" ;;
        aarch64|arm64) arch="arm64" ;;
        *)       error "Unsupported architecture: $(uname -m)" ;;
    esac
    
    echo "${os}-${arch}"
}

main() {
    log "Installing ${BINARY_NAME} ${VERSION} for ${PLATFORM}"
    
    # Verify platform compatibility
    local detected_platform
    detected_platform=$(detect_platform)
    
    if [[ "$detected_platform" != "$PLATFORM" ]]; then
        warn "Platform mismatch: detected $detected_platform, installing for $PLATFORM"
        read -p "Continue? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "Installation cancelled"
        fi
    fi
    
    # Download URL
    local download_url="https://github.com/${REPO}/releases/download/${VERSION}/${BINARY_NAME}-${PLATFORM}${BINARY_EXT}"
    
    # Determine installation directory
    local install_dir
    if [[ -w "/usr/local/bin" ]]; then
        install_dir="/usr/local/bin"
    elif [[ -d "$HOME/.local/bin" ]]; then
        install_dir="$HOME/.local/bin"
        mkdir -p "$install_dir"
    else
        install_dir="$HOME/bin"
        mkdir -p "$install_dir"
    fi
    
    local binary_path="$install_dir/$BINARY_NAME"
    
    log "Downloading $BINARY_NAME from $download_url"
    
    # Download with progress bar
    if command -v curl >/dev/null 2>&1; then
        curl -fsSL --progress-bar "$download_url" -o "$binary_path"
    elif command -v wget >/dev/null 2>&1; then
        wget --progress=bar:force "$download_url" -O "$binary_path"
    else
        error "Neither curl nor wget found. Please install one of them."
    fi
    
    # Make executable
    chmod +x "$binary_path"
    
    log "Successfully installed $BINARY_NAME to $binary_path"
    
    # Check if install_dir is in PATH
    if [[ ":$PATH:" != *":$install_dir:"* ]]; then
        warn "$install_dir is not in your PATH"
        echo "Add the following line to your shell profile (.bashrc, .zshrc, etc.):"
        echo "  export PATH=\"$install_dir:\$PATH\""
    fi
    
    # Verify installation
    if "$binary_path" --version >/dev/null 2>&1; then
        log "Installation verified successfully"
        "$binary_path" --version
    else
        warn "Installation completed but binary verification failed"
    fi
}

# Run main function
main "$@"