name: npm Publish

on:
  workflow_call:
    inputs:
      source_tag:
        description: 'GitHub release tag to source binaries from (e.g., v1.0.0)'
        required: true
        type: string
      package_name:
        description: 'npm package name'
        required: true
        type: string
      npm_dist_tag:
        description: 'npm dist-tag (latest, beta, alpha, rc, dev) - REQUIRED for safety'
        required: true
        type: string
      binary_name:
        description: 'Binary name to package (defaults to package_name)'
        required: false
        type: string
        default: ''
      package_description:
        description: 'Package description for package.json'
        required: false
        type: string
        default: ''
      package_keywords:
        description: 'Comma-separated keywords for package.json'
        required: false
        type: string
        default: ''
      package_author:
        description: 'Package author for package.json'
        required: false
        type: string
        default: ''
      package_homepage:
        description: 'Package homepage URL'
        required: false
        type: string
        default: ''
      package_repository:
        description: 'Package repository URL'
        required: false
        type: string
        default: ''
      npm_registry:
        description: 'Custom npm registry URL'
        required: false
        type: string
        default: 'https://registry.npmjs.org'
    secrets:
      NPM_TOKEN:
        required: true

env:
  NODE_VERSION: '18'

jobs:
  validate-release:
    name: Validate Release Consistency
    runs-on: ubuntu-latest
    outputs:
      validated_tag: ${{ steps.validate.outputs.validated_tag }}
      npm_version: ${{ steps.validate.outputs.npm_version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
    steps:
      - name: Validate source tag format
        id: validate
        shell: bash
        run: |
          SOURCE_TAG="${{ inputs.source_tag }}"
          NPM_DIST_TAG="${{ inputs.npm_dist_tag }}"
          
          # Validate source tag format (must start with v and follow semver)
          if [[ ! "$SOURCE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid source tag format: $SOURCE_TAG"
            echo "Expected format: v1.0.0 or v1.0.0-beta.1"
            exit 1
          fi
          
          # Extract version without 'v' prefix
          NPM_VERSION="${SOURCE_TAG#v}"
          
          # Determine if this is a prerelease version
          IS_PRERELEASE="false"
          if [[ "$NPM_VERSION" =~ -[a-zA-Z] ]]; then
            IS_PRERELEASE="true"
          fi
          
          # Validate npm dist-tag is safe
          case "$NPM_DIST_TAG" in
            latest|beta|alpha|rc|dev)
              echo "Valid npm dist-tag: $NPM_DIST_TAG"
              ;;
            *)
              echo "Error: Invalid npm dist-tag: $NPM_DIST_TAG"
              echo "Allowed values: latest, beta, alpha, rc, dev"
              exit 1
              ;;
          esac
          
          # Safety check: prerelease versions should not use 'latest' tag
          if [[ "$IS_PRERELEASE" == "true" && "$NPM_DIST_TAG" == "latest" ]]; then
            echo "Error: Prerelease version $NPM_VERSION cannot use 'latest' tag"
            echo "Use beta, alpha, rc, or dev for prerelease versions"
            exit 1
          fi
          
          # Safety check: stable versions with non-latest tags should be intentional
          if [[ "$IS_PRERELEASE" == "false" && "$NPM_DIST_TAG" != "latest" ]]; then
            echo "Warning: Stable version $NPM_VERSION using non-latest tag: $NPM_DIST_TAG"
            echo "This is allowed but unusual - ensure this is intentional"
          fi
          
          echo "validated_tag=$SOURCE_TAG" >> $GITHUB_OUTPUT
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "✅ Validation passed:"
          echo "  GitHub Tag: $SOURCE_TAG"
          echo "  npm Version: $NPM_VERSION"  
          echo "  npm Tag: $NPM_DIST_TAG"
          echo "  Is Prerelease: $IS_PRERELEASE"

  download-binaries:
    name: Download Release Binaries
    needs: validate-release
    runs-on: ubuntu-latest
    outputs:
      binary_platforms: ${{ steps.download.outputs.binary_platforms }}
    steps:
      - name: Download release assets
        id: download
        shell: bash
        run: |
          SOURCE_TAG="${{ needs.validate-release.outputs.validated_tag }}"
          BINARY_NAME="${{ inputs.binary_name || inputs.package_name }}"
          
          # Create download directory
          mkdir -p binaries
          
          echo "Downloading binaries for $BINARY_NAME from release $SOURCE_TAG"
          
          # Download release assets using GitHub CLI
          # Look for common platform patterns
          PLATFORMS=()
          
          # Try to download common platform binaries
          for platform in linux-x86_64 linux-arm64 mac-x86_64 mac-arm64 windows-x86_64 windows-arm64; do
            # Try different naming patterns
            for pattern in "${BINARY_NAME}-${platform}" "${BINARY_NAME}-${platform}.exe"; do
              if gh release download "$SOURCE_TAG" --pattern "$pattern" --dir binaries 2>/dev/null; then
                echo "✅ Downloaded: $pattern"
                PLATFORMS+=("$platform")
                break
              fi
            done
          done
          
          # Verify we got some binaries
          BINARY_COUNT=$(find binaries -type f | wc -l)
          if [[ "$BINARY_COUNT" -eq 0 ]]; then
            echo "Error: No binaries found for release $SOURCE_TAG"
            echo "Expected binary name pattern: ${BINARY_NAME}-{platform}"
            echo "Available assets:"
            gh release view "$SOURCE_TAG" --json assets --jq '.assets[].name'
            exit 1
          fi
          
          echo "📦 Downloaded $BINARY_COUNT binaries for platforms: ${PLATFORMS[*]}"
          
          # Convert platforms array to JSON for output
          PLATFORMS_JSON=$(printf '%s\n' "${PLATFORMS[@]}" | jq -R . | jq -s .)
          echo "binary_platforms=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          
          # List downloaded files
          echo "Downloaded files:"
          find binaries -type f -exec basename {} \;
        env:
          GITHUB_TOKEN: ${{ github.token }}

  create-npm-package:
    name: Create npm Package
    needs: [validate-release, download-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ inputs.npm_registry }}

      - name: Download binaries artifact
        shell: bash
        run: |
          # Re-download binaries (artifacts don't persist between jobs)
          SOURCE_TAG="${{ needs.validate-release.outputs.validated_tag }}"
          BINARY_NAME="${{ inputs.binary_name || inputs.package_name }}"
          
          mkdir -p binaries
          
          # Download the same binaries as before
          for platform in linux-x86_64 linux-arm64 mac-x86_64 mac-arm64 windows-x86_64 windows-arm64; do
            for pattern in "${BINARY_NAME}-${platform}" "${BINARY_NAME}-${platform}.exe"; do
              if gh release download "$SOURCE_TAG" --pattern "$pattern" --dir binaries 2>/dev/null; then
                break
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create npm package structure
        shell: bash
        run: |
          PACKAGE_NAME="${{ inputs.package_name }}"
          BINARY_NAME="${{ inputs.binary_name || inputs.package_name }}"
          NPM_VERSION="${{ needs.validate-release.outputs.npm_version }}"
          SOURCE_TAG="${{ needs.validate-release.outputs.validated_tag }}"
          
          # Create package directory
          mkdir -p npm-package/bin
          
          # Copy binaries to package
          cp binaries/* npm-package/bin/ 2>/dev/null || true
          
          # Create binary detection script
          cat > npm-package/download-binary.js << 'EOF'
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');

function getPlatform() {
  const platform = os.platform();
  const arch = os.arch();
  
  // Map Node.js platform/arch to our naming convention
  const platformMap = {
    'linux': {
      'x64': 'linux-x86_64',
      'arm64': 'linux-arm64'
    },
    'darwin': {
      'x64': 'mac-x86_64', 
      'arm64': 'mac-arm64'
    },
    'win32': {
      'x64': 'windows-x86_64',
      'arm64': 'windows-arm64'
    }
  };
  
  return platformMap[platform]?.[arch];
}

function findBinary() {
  const targetPlatform = getPlatform();
  if (!targetPlatform) {
    console.error(`Unsupported platform: ${os.platform()}-${os.arch()}`);
    process.exit(1);
  }
  
  const binDir = path.join(__dirname, 'bin');
  const binaryName = process.env.npm_package_name || 'BINARY_NAME_PLACEHOLDER';
  
  // Try different binary name patterns
  const patterns = [
    `${binaryName}-${targetPlatform}`,
    `${binaryName}-${targetPlatform}.exe`
  ];
  
  for (const pattern of patterns) {
    const binaryPath = path.join(binDir, pattern);
    if (fs.existsSync(binaryPath)) {
      return binaryPath;
    }
  }
  
  console.error(`Binary not found for platform ${targetPlatform}`);
  console.error(`Available binaries:`, fs.readdirSync(binDir));
  process.exit(1);
}

// Make binary executable and create symlink
const binaryPath = findBinary();
fs.chmodSync(binaryPath, 0o755);

console.log(`✅ Binary ready: ${binaryPath}`);
EOF
          
          # Replace placeholder in download script
          sed -i "s/BINARY_NAME_PLACEHOLDER/${BINARY_NAME}/g" npm-package/download-binary.js
          
          # Create package.json
          cat > npm-package/package.json << EOF
{
  "name": "$PACKAGE_NAME",
  "version": "$NPM_VERSION",
  "description": "${{ inputs.package_description || format('Cross-platform binary for {0}', inputs.package_name) }}",
  "bin": {
    "$BINARY_NAME": "./download-binary.js"
  },
  "files": [
    "bin/",
    "download-binary.js",
    "README.md"
  ],
  "scripts": {
    "postinstall": "node download-binary.js"
  },
  "keywords": [$(echo "${{ inputs.package_keywords }}" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')],
  "author": "${{ inputs.package_author }}",
  "license": "MIT",
  "homepage": "${{ inputs.package_homepage || format('https://github.com/{0}', github.repository) }}",
  "repository": {
    "type": "git",
    "url": "${{ inputs.package_repository || format('https://github.com/{0}.git', github.repository) }}"
  },
  "engines": {
    "node": ">=14"
  },
  "os": ["linux", "darwin", "win32"],
  "cpu": ["x64", "arm64"]
}
EOF
          
          # Create README for npm package
          cat > npm-package/README.md << EOF
# $PACKAGE_NAME

Cross-platform binary distribution for $BINARY_NAME.

## Installation

\`\`\`bash
npm install -g $PACKAGE_NAME
\`\`\`

## Usage

After installation, the \`$BINARY_NAME\` command will be available in your PATH.

\`\`\`bash
$BINARY_NAME --help
\`\`\`

## Platform Support

This package automatically downloads the correct binary for your platform:

- Linux (x86_64, ARM64)
- macOS (Intel, Apple Silicon)  
- Windows (x86_64, ARM64)

## Version

This package contains $BINARY_NAME version $NPM_VERSION from GitHub release $SOURCE_TAG.

## Source

Built from: ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, needs.validate-release.outputs.validated_tag) }}
EOF
          
          echo "📦 npm package created in npm-package/"
          echo "Package contents:"
          find npm-package -type f -exec echo "  {}" \;

      - name: Publish to npm
        shell: bash
        run: |
          cd npm-package
          
          NPM_DIST_TAG="${{ inputs.npm_dist_tag }}"
          PACKAGE_NAME="${{ inputs.package_name }}"
          NPM_VERSION="${{ needs.validate-release.outputs.npm_version }}"
          
          echo "📤 Publishing $PACKAGE_NAME@$NPM_VERSION with tag @$NPM_DIST_TAG"
          
          # CRITICAL: Always use explicit --tag to prevent accidental @latest assignment
          npm publish --tag "$NPM_DIST_TAG" --access public
          
          echo "✅ Successfully published $PACKAGE_NAME@$NPM_VERSION (@$NPM_DIST_TAG)"
          
          # Verify publication
          echo "📋 Package info:"
          npm view "$PACKAGE_NAME" dist-tags
          npm view "$PACKAGE_NAME@$NPM_DIST_TAG" version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Summary
        shell: bash
        run: |
          PACKAGE_NAME="${{ inputs.package_name }}"
          NPM_VERSION="${{ needs.validate-release.outputs.npm_version }}"
          NPM_DIST_TAG="${{ inputs.npm_dist_tag }}"
          
          echo "## 🎉 npm Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`$PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$NPM_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`@$NPM_DIST_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: ${{ needs.validate-release.outputs.validated_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install -g $PACKAGE_NAME@$NPM_DIST_TAG" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Registry" >> $GITHUB_STEP_SUMMARY
          echo "[${{ inputs.npm_registry }}](${{ inputs.npm_registry }})" >> $GITHUB_STEP_SUMMARY