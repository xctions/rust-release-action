# Example workflow for publishing Rust binaries to both GitHub Releases and npm
# Place this file in .github/workflows/ in your Rust project

name: Release to GitHub and npm

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish'
        required: true
        default: 'v0.1.0'
      npm_tag:
        description: 'npm dist-tag (latest, beta, alpha, dev)'
        required: false
        default: 'beta'

jobs:
  # First: Create GitHub Release with binaries
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      binary_name: 'my-cli'  # or omit to use repository name
      release-tag: ${{ github.event.inputs.tag || github.ref_name }}
      rust-version: 'stable'
      cargo-args: '--release --locked'
      generate-checksums: true
      create-archives: true
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Second: Publish to npm (depends on successful GitHub release)
  npm-publish:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      # GitHub release to source binaries from
      source_tag: ${{ github.event.inputs.tag || github.ref_name }}
      
      # npm package configuration
      package_name: 'my-cli'  # npm package name (can differ from binary name)
      
      # Safe deployment: always use beta first, promote to latest manually
      npm_dist_tag: ${{ github.event.inputs.npm_tag || 'beta' }}
      
      # Optional: package description
      package_description: 'A fast CLI tool built with Rust'
      
      # Optional: keywords for npm discovery
      package_keywords: 'cli,rust,tool,fast'
      
      # Optional: custom binary name in npm (defaults to package_name)
      binary_name: 'my-cli'
      
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

---

# Advanced example with conditional npm publishing
name: Advanced Release Strategy

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - 'release/*'

jobs:
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      binary_name: 'my-advanced-cli'
      release-tag: ${{ github.ref_name }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    needs: rust-release
    # Only publish to npm on tag releases
    if: startsWith(github.ref, 'refs/tags/')
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: '@myorg/advanced-cli'  # Scoped package
      
      # Smart tag mapping based on GitHub tag
      npm_dist_tag: ${{ 
        contains(github.ref_name, 'alpha') && 'alpha' ||
        contains(github.ref_name, 'beta') && 'beta' ||
        contains(github.ref_name, 'rc') && 'next' ||
        endsWith(github.ref_name, '-stable') && 'latest' ||
        'beta'
      }}
      
      # Enhanced package metadata
      package_description: 'Advanced CLI tool with enterprise features'
      package_keywords: 'cli,enterprise,rust,productivity,automation'
      package_author: 'My Organization <hello@myorg.com>'
      package_homepage: 'https://myorg.com/cli'
      package_repository: 'https://github.com/myorg/advanced-cli'
      
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

---

# Example with manual approval for production releases
name: Controlled Release Process

on:
  push:
    tags:
      - 'v*'

jobs:
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      binary_name: 'production-cli'
      release-tag: ${{ github.ref_name }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Always publish to beta first
  npm-publish-beta:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: 'production-cli'
      npm_dist_tag: 'beta'
      package_description: 'Production-ready CLI tool'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Manual approval required for latest tag
  npm-publish-latest:
    needs: npm-publish-beta
    runs-on: ubuntu-latest
    environment: production  # Requires manual approval
    steps:
      - name: Promote beta to latest
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF_NAME#v}
          
          # Promote beta version to latest
          npm dist-tag add production-cli@${VERSION}-beta.0 latest
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

---

# Multi-binary project example
name: Multi-Binary Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Build all binaries in one release
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      # Note: This will change when multi-binary support is added
      binary_name: 'main-cli'  # Main binary
      release-tag: ${{ github.ref_name }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish main CLI tool to npm
  npm-publish-main:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: 'main-cli'
      binary_name: 'main-cli'
      npm_dist_tag: 'beta'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish helper tool to npm (separate package)
  npm-publish-helper:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: 'helper-cli'
      binary_name: 'helper-cli'  # Different binary from same release
      npm_dist_tag: 'beta'
      package_description: 'Helper tool for main-cli'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

---

# Testing and validation example
name: Safe npm Publishing with Testing

on:
  push:
    tags:
      - 'v*'

jobs:
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      binary_name: 'tested-cli'
      release-tag: ${{ github.ref_name }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to testing tag first
  npm-publish-test:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: 'tested-cli'
      npm_dist_tag: 'testing'  # Custom safe tag
      package_description: 'CLI tool with comprehensive testing'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Validate the npm package
  validate-npm-package:
    needs: npm-publish-test
    runs-on: ubuntu-latest
    steps:
      - name: Install and test npm package
        run: |
          # Install from testing tag
          npm install -g tested-cli@testing
          
          # Run basic tests
          tested-cli --version
          tested-cli --help
          
          # Run integration tests
          tested-cli test-command --dry-run

      - name: Test on different Node versions
        strategy:
          matrix:
            node-version: [16, 18, 20]
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
        run: |
          npm install -g tested-cli@testing
          tested-cli --version

  # Promote to beta only after validation
  npm-promote-to-beta:
    needs: validate-npm-package
    runs-on: ubuntu-latest
    steps:
      - name: Promote testing to beta
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          npm dist-tag add tested-cli@${VERSION}-testing.0 beta
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

---

# Enterprise deployment example
name: Enterprise npm Deployment

on:
  push:
    tags:
      - 'v*'

jobs:
  rust-release:
    uses: xctions/rust-release/.github/workflows/reusable-rust-release.yml@v2
    with:
      binary_name: 'enterprise-tool'
      release-tag: ${{ github.ref_name }}
      rust-version: '1.75.0'  # Pin specific Rust version
      cargo-args: '--release --locked --no-default-features --features enterprise'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    needs: rust-release
    uses: xctions/rust-release/.github/workflows/npm-publish.yml@v2
    with:
      source_tag: ${{ github.ref_name }}
      package_name: '@company/enterprise-tool'
      npm_dist_tag: 'latest'  # Direct to latest for enterprise
      
      # Enterprise metadata
      package_description: 'Enterprise CLI tool for internal operations'
      package_keywords: 'enterprise,internal,ops,automation'
      package_author: 'Company DevOps <devops@company.com>'
      package_license: 'UNLICENSED'  # Private package
      package_private: true  # Don't publish to public registry
      
      # Custom registry for enterprise
      npm_registry: 'https://npm.company.com'
      
    secrets:
      NPM_TOKEN: ${{ secrets.COMPANY_NPM_TOKEN }}